{
    "text": [
      "",
      "[",
      "  [",
      "    [",
      "      [",
      "        (func a ",
      "          (func b ",
      "            (func c ",
      "              (func d ",
      "                [",
      "                  (hoisted passert) ",
      "                  [",
      "                    [",
      "                      (hoisted pand) ",
      "                      (const bool True)",
      "                    ] ",
      "                    (delay ",
      "                      [",
      "                        [",
      "                          (native lessThanInteger) ",
      "                          (letted 4 time_diff)",
      "                        ] ",
      "                        (const int 180000)",
      "                      ]",
      "                    )",
      "                  ]",
      "                ]",
      "              )",
      "            )",
      "          )",
      "        ) ",
      "        (const struct({ PTxOutRef: { id: struct({ PTxId: { txId: bs } } }) index: int } } }) #d8799fd8799f58201cd30f11c3d774fa1cb43620810a405e6048c8ecea2e85ff43f5c3ad08096e46ff01ff)",
      "      ] ",
      "      (const data #d8799f00582071eb1a4896739027745df976a065ded7ffd4e6371a2a9256999f59371b50b36a0519ffff001b0000018a5b512a340080ff)",
      "    ] ",
      "    (const struct({ CtxLike: { tx: struct({ PTxInfo: { inputs: list(struct({ PTxInInfo: { utxoRef: struct({ PTxOutRef: { id: struct({ PTxId: { txId: bs } } }) index: int } } }) resolved: struct({ PTxOut: { address: struct({ PAddress: { credential: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) stakingCredential: struct({ Just: { val: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, Nothing: {} } }) } } }) value: alias(list(alias(pair(asData(alias(bs)),asData(alias(list(pair(asData(alias(bs)),asData(int))))))))) datum: struct({ NoDatum: {} }, DatumHash: { datumHash: alias(bs) } }, InlineDatum: { datum: data } } }) refScrpt: struct({ Just: { val: alias(bs) } }, Nothing: {} } }) } } }) } } })) refInputs: list(struct({ PTxInInfo: { utxoRef: struct({ PTxOutRef: { id: struct({ PTxId: { txId: bs } } }) index: int } } }) resolved: struct({ PTxOut: { address: struct({ PAddress: { credential: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) stakingCredential: struct({ Just: { val: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, Nothing: {} } }) } } }) value: alias(list(alias(pair(asData(alias(bs)),asData(alias(list(pair(asData(alias(bs)),asData(int))))))))) datum: struct({ NoDatum: {} }, DatumHash: { datumHash: alias(bs) } }, InlineDatum: { datum: data } } }) refScrpt: struct({ Just: { val: alias(bs) } }, Nothing: {} } }) } } }) } } })) outputs: list(struct({ PTxOut: { address: struct({ PAddress: { credential: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) stakingCredential: struct({ Just: { val: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, Nothing: {} } }) } } }) value: alias(list(alias(pair(asData(alias(bs)),asData(alias(list(pair(asData(alias(bs)),asData(int))))))))) datum: struct({ NoDatum: {} }, DatumHash: { datumHash: alias(bs) } }, InlineDatum: { datum: data } } }) refScrpt: struct({ Just: { val: alias(bs) } }, Nothing: {} } }) } } })) fee: alias(list(alias(pair(asData(alias(bs)),asData(alias(list(pair(asData(alias(bs)),asData(int))))))))) mint: alias(list(alias(pair(asData(alias(bs)),asData(alias(list(pair(asData(alias(bs)),asData(int))))))))) dCertificates: list(struct({ KeyRegistration: { stakeKey: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, KeyDeRegistration: { stakeKey: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, KeyDelegation: { delegator: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) poolKeyHash: alias(bs) } }, PoolRegistration: { poolId: alias(bs) poolVFR: alias(bs) } }, PoolRetire: { poolId: alias(bs) epoch: int } }, Genesis: {} }, MoveInstantRewards: {} } })) withdrawals: list(pair(struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }),asData(int))) interval: struct({ PInterval: { from: struct({ PBound: { bound: struct({ PNegInf: {} }, PFinite: { _0: int } }, PPosInf: {} } }) inclusive: bool } } }) to: struct({ PBound: { bound: struct({ PNegInf: {} }, PFinite: { _0: int } }, PPosInf: {} } }) inclusive: bool } } }) } } }) signatories: list(alias(bs)) redeemers: list(pair(struct({ Minting: { currencySym: alias(bs) } }, Spending: { utxoRef: struct({ PTxOutRef: { id: struct({ PTxId: { txId: bs } } }) index: int } } }) } }, Rewarding: { stakeCredential: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, Certifying: { dCert: struct({ KeyRegistration: { stakeKey: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, KeyDeRegistration: { stakeKey: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, KeyDelegation: { delegator: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) poolKeyHash: alias(bs) } }, PoolRegistration: { poolId: alias(bs) poolVFR: alias(bs) } }, PoolRetire: { poolId: alias(bs) epoch: int } }, Genesis: {} }, MoveInstantRewards: {} } }) } } }),data)) datums: list(pair(asData(alias(bs)),data)) id: struct({ PTxId: { txId: bs } } }) } } }) purpose: struct({ Minting: { currencySym: alias(bs) } }, Spending: { utxoRef: struct({ PTxOutRef: { id: struct({ PTxId: { txId: bs } } }) index: int } } }) } }, Rewarding: { stakeCredential: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, Certifying: { dCert: struct({ KeyRegistration: { stakeKey: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, KeyDeRegistration: { stakeKey: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) } }, KeyDelegation: { delegator: struct({ PStakingHash: { _0: struct({ PPubKeyCredential: { pkh: alias(bs) } }, PScriptCredential: { valHash: alias(bs) } } }) } }, PStakingPtr: { _0: int _1: int _2: int } } }) poolKeyHash: alias(bs) } }, PoolRegistration: { poolId: alias(bs) poolVFR: alias(bs) } }, PoolRetire: { poolId: alias(bs) epoch: int } }, Genesis: {} }, MoveInstantRewards: {} } }) } } }) } }, InputNonce: { nonce: bs } } }) #d87a9f50842b09bb0f88bf1232901043701534ceff)",
      "  ] ",
      "  (const data #d8799fd8799f9fd8799fd8799fd8799f582012cc3906a43731477e63522a24cbb5eaf74046bf7b44f600d8f062ecac331b71ff00ffd8799fd8799fd87a9f581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278ffd87a80ffbf40bf401a001898f4ff581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278bf466974616d616501ffffd87b9fd8799f00582071eb1a4896739027745df976a065ded7ffd4e6371a2a9256999f59371b50b36a0519ffff001b0000018a5b512a340080ffffd87a80ffffd8799fd8799fd8799f5820fbbce31d47e45af499baff9446c99ccbc2e80db613467dbc5ffea2f3bb10a8a2ff01ffd8799fd8799fd8799f581c13867b04db054caa9655378fe37fedee7029924fbe1243887dc35fd8ffd87a80ffbf40bf401b000000024efc84ffffffd87980d87a80ffffff9fd8799fd8799fd8799f5820fbbce31d47e45af499baff9446c99ccbc2e80db613467dbc5ffea2f3bb10a8a2ff00ffd8799fd8799fd87a9f581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278ffd87a80ffbf40bf401a0128cce6ffffd87b9f00ffd8799f581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278ffffffd8799fd8799fd8799f5820fbbce31d47e45af499baff9446c99ccbc2e80db613467dbc5ffea2f3bb10a8a2ff00ffd8799fd8799fd87a9f581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278ffd87a80ffbf40bf401a0128cce6ffffd87b9f00ffd8799f581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278ffffffff9fd8799fd8799fd87a9f581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278ffd87a80ffbf40bf401a001898f4ff581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278bf466974616d616501ffffd87b9fd8799f01582000000f3b69e1436d48366f34c2e217cf598dc2f886d7dc5bb56688b8365a748b0519ffff1a000a75bc1b0000018a5b5b9ff00080ffffd87a80ffd8799fd8799fd8799f581c13867b04db054caa9655378fe37fedee7029924fbe1243887dc35fd8ffd87a80ffbf40bf401b000000024ef9ac02ff581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278bf4754454d505552411b000000012a05f200ffffd87980d87a80ffffbf40bf401a0002d8fdffffbf40bf4000ff581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278bf4754454d505552411b000000012a05f200ffff80a0d8799fd8799fd87a9f1b0000018a5b5a4060ffd87980ffd8799fd87a9f1b0000018a5b5cff80ffd87980ffff80bfd87a9fd8799fd8799f582012cc3906a43731477e63522a24cbb5eaf74046bf7b44f600d8f062ecac331b71ff00ffffd87a9f50842b09bb0f88bf1232901043701534ceffd8799f581cc9981006c4abf1eab96a0c87b0ee3d40b8007cd4c9b3d0dea357c278ffd87980ffa05820198ca261bc2c0f39e64132c19cd2b2e38dffc4f5594ec195d8750013f73f1b7bffd87a9fd8799fd8799f582012cc3906a43731477e63522a24cbb5eaf74046bf7b44f600d8f062ecac331b71ff00ffffff)",
      "]"
    ],
    "letted": {
      "get_fst_field_as_int": [
        "",
        "[",
        "  (native unIData) ",
        "  [",
        "    (native headList) ",
        "    (-1)",
        "  ]",
        "]"
      ],
      "ctx_raw_fields": [
        "",
        "[",
        "  (hoisted constr_raw_fields) ",
        "  (-2)",
        "]"
      ],
      "fst_ctx_raw_field": [
        "",
        "[",
        "  (native headList) ",
        "  (letted 5 ctx_raw_fields)",
        "]"
      ],
      "tx_raw_fields": [
        "",
        "[",
        "  (hoisted constr_raw_fields) ",
        "  (letted 5 fst_ctx_raw_field)",
        "]"
      ],
      "raw_tx_interval": [
        "",
        "[",
        "  (hoisted list_at_7) ",
        "  (letted 5 tx_raw_fields)",
        "]"
      ],
      "raw_tx_interval_fields": [
        "",
        "[",
        "  (hoisted constr_raw_fields) ",
        "  (letted 5 raw_tx_interval)",
        "]"
      ],
      "raw_lower_bound": [
        "",
        "[",
        "  (native headList) ",
        "  (letted 5 raw_tx_interval_fields)",
        "]"
      ],
      "raw_lower_bound_fields": [
        "",
        "[",
        "  (hoisted constr_raw_fields) ",
        "  (letted 5 raw_lower_bound)",
        "]"
      ],
      "fst_lower_bound_field": [
        "",
        "[",
        "  (native headList) ",
        "  (letted 5 raw_lower_bound_fields)",
        "]"
      ],
      "finite_lower_bound_int": [
        "",
        "[",
        "  (func a ",
        "    [",
        "      [",
        "        [",
        "          [",
        "            (hoisted match3Ctors) ",
        "            (letted 5 fst_lower_bound_field)",
        "          ] ",
        "          a",
        "        ] ",
        "        (func b ",
        "          (letted 6 get_fst_field_as_int)",
        "        )",
        "      ] ",
        "      a",
        "    ]",
        "  ) ",
        "  (func a (error)",
        "  )",
        "]"
      ],
      "raw_upper_bound": [
        "",
        "[",
        "  (hoisted list_at_1) ",
        "  (letted 5 raw_tx_interval_fields)",
        "]"
      ],
      "raw_upper_bound_fields": [
        "",
        "[",
        "  (hoisted constr_raw_fields) ",
        "  (letted 5 raw_upper_bound)",
        "]"
      ],
      "fst_upper_bound_field": [
        "",
        "[",
        "  (native headList) ",
        "  (letted 5 raw_upper_bound_fields)",
        "]"
      ],
      "time_diff": [
        "",
        "[",
        "  [",
        "    (native subtractInteger) ",
        "    [",
        "      (func a ",
        "        [",
        "          [",
        "            [",
        "              [",
        "                (hoisted match3Ctors) ",
        "                (letted 5 fst_upper_bound_field)",
        "              ] ",
        "              a",
        "            ] ",
        "            (func b ",
        "              (letted 6 get_fst_field_as_int)",
        "            )",
        "          ] ",
        "          a",
        "        ]",
        "      ) ",
        "      (func a (error)",
        "      )",
        "    ]",
        "  ] ",
        "  (letted 4 finite_lower_bound_int)",
        "]"
      ]
    },
    "hoisted": {
      "passert": [
        "",
        "(func a ",
        "  (force ",
        "    [",
        "      [",
        "        [",
        "          (native ifThenElse) ",
        "          a",
        "        ] ",
        "        (delay ",
        "          (const unit ())",
        "        )",
        "      ] ",
        "      (delay (error)",
        "      )",
        "    ]",
        "  )",
        ")"
      ],
      "pand": [
        "",
        "(func a ",
        "  (func b ",
        "    (force ",
        "      [",
        "        [",
        "          [",
        "            (native ifThenElse) ",
        "            a",
        "          ] ",
        "          b",
        "        ] ",
        "        (delay ",
        "          (const bool False)",
        "        )",
        "      ]",
        "    )",
        "  )",
        ")"
      ],
      "constr_raw_fields": [
        "",
        "(func a ",
        "  [",
        "    (native sndPair) ",
        "    [",
        "      (native unConstrData) ",
        "      a",
        "    ]",
        "  ]",
        ")"
      ],
      "list_at_7": [
        "",
        "(func a ",
        "  [",
        "    (native headList) ",
        "    [",
        "      (native tailList) ",
        "      [",
        "        (native tailList) ",
        "        [",
        "          (native tailList) ",
        "          [",
        "            (native tailList) ",
        "            [",
        "              (native tailList) ",
        "              [",
        "                (native tailList) ",
        "                [",
        "                  (native tailList) ",
        "                  a",
        "                ]",
        "              ]",
        "            ]",
        "          ]",
        "        ]",
        "      ]",
        "    ]",
        "  ]",
        ")"
      ],
      "match3Ctors": [
        "",
        "(func constrData ",
        "  (func ctor_2_cont ",
        "    (func ctor_1_cont ",
        "      (func ctor_0_cont ",
        "        [",
        "          (func unconstrPair ",
        "            [",
        "              [",
        "                (func ctor_idx ",
        "                  (force ",
        "                    [",
        "                      [",
        "                        [",
        "                          (native ifThenElse) ",
        "                          [",
        "                            ctor_idx ",
        "                            (const int 0)",
        "                          ]",
        "                        ] ",
        "                        (delay ",
        "                          ctor_0_cont",
        "                        )",
        "                      ] ",
        "                      (delay ",
        "                        (force ",
        "                          [",
        "                            [",
        "                              [",
        "                                (native ifThenElse) ",
        "                                [",
        "                                  ctor_idx ",
        "                                  (const int 1)",
        "                                ]",
        "                              ] ",
        "                              (delay ",
        "                                ctor_1_cont",
        "                              )",
        "                            ] ",
        "                            (delay ",
        "                              (force ",
        "                                [",
        "                                  [",
        "                                    [",
        "                                      (native ifThenElse) ",
        "                                      [",
        "                                        ctor_idx ",
        "                                        (const int 2)",
        "                                      ]",
        "                                    ] ",
        "                                    (delay ",
        "                                      ctor_2_cont",
        "                                    )",
        "                                  ] ",
        "                                  (delay (error)",
        "                                  )",
        "                                ]",
        "                              )",
        "                            )",
        "                          ]",
        "                        )",
        "                      )",
        "                    ]",
        "                  )",
        "                ) ",
        "                [",
        "                  (native equalsInteger) ",
        "                  [",
        "                    (native fstPair) ",
        "                    unconstrPair",
        "                  ]",
        "                ]",
        "              ] ",
        "              [",
        "                (native sndPair) ",
        "                unconstrPair",
        "              ]",
        "            ]",
        "          ) ",
        "          [",
        "            (native unConstrData) ",
        "            constrData",
        "          ]",
        "        ]",
        "      )",
        "    )",
        "  )",
        ")"
      ],
      "list_at_1": [
        "",
        "(func a ",
        "  [",
        "    (native headList) ",
        "    [",
        "      (native tailList) ",
        "      a",
        "    ]",
        "  ]",
        ")"
      ]
    }
  }